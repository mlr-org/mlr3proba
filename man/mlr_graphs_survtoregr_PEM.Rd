% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pipelines.R
\name{mlr_graphs_survtoregr_pem}
\alias{mlr_graphs_survtoregr_pem}
\alias{pipeline_survtoregr_pem}
\title{Survival to Poisson Regression Reduction Pipeline}
\usage{
pipeline_survtoregr_pem(
  learner,
  cut = NULL,
  max_time = NULL,
  rhs = NULL,
  graph_learner = FALSE
)
}
\arguments{
\item{learner}{\link[mlr3:LearnerRegr]{LearnerRegr}\cr
Regression learner to fit the transformed \link[mlr3:TaskRegr]{TaskRegr}.
\code{learner} must be able to handle \code{offset}.}

\item{cut}{\code{numeric()}\cr
Split points, used to partition the data into intervals.
If unspecified, all unique event times will be used.
If \code{cut} is a single integer, it will be interpreted as the number of equidistant
intervals from 0 until the maximum event time.}

\item{max_time}{\code{numeric(1)}\cr
If cut is unspecified, this will be the last possible event time.
All event times after max_time will be administratively censored at max_time.}

\item{rhs}{(\code{character(1)})\cr
Right-hand side of the formula to use with the learner.
All features of the task are available as well as \code{tend} the upper bounds
of the intervals created by \code{cut}.
If \code{rhs} is unspecified, the formula of the task will be used.}

\item{graph_learner}{\code{logical(1)}\cr
If \code{TRUE} returns wraps the \link[mlr3pipelines:Graph]{Graph} as a
\link[mlr3pipelines:mlr_learners_graph]{GraphLearner} otherwise (default) returns as a \code{Graph}.}
}
\value{
\link[mlr3pipelines:Graph]{mlr3pipelines::Graph} or \link[mlr3pipelines:mlr_learners_graph]{mlr3pipelines::GraphLearner}
}
\description{
Wrapper around multiple \link[mlr3pipelines:PipeOp]{PipeOp}s to help in creation
of complex survival reduction methods.
}
\details{
The pipeline consists of the following steps:
\enumerate{
\item \link{PipeOpTaskSurvRegrPEM} Converts \link{TaskSurv} to a \link[mlr3:TaskRegr]{TaskRegr}.
\item A \link{LearnerRegr} is fit and predicted on the new \code{TaskRegr}.
\item \link{PipeOpPredRegrSurvPEM} transforms the resulting \link[mlr3:PredictionRegr]{PredictionRegr}
to \link{PredictionSurv}.
}
}
\examples{
\dontshow{if (mlr3misc::require_namespaces(c("mlr3pipelines", "mlr3learners"), quietly = TRUE)) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
\dontrun{
  library(mlr3)
  library(mlr3learners)
  library(mlr3pipelines)

  task = tsk("lung")
  part = partition(task)

  grlrn = ppl(
    "survtoregr_pem",
    learner = lrn("regr.xgboost")
  )
  grlrn$train(task, row_ids = part$train)
  grlrn$predict(task, row_ids = part$test)
}
\dontshow{\}) # examplesIf}
}
\seealso{
Other pipelines: 
\code{\link{mlr_graphs_crankcompositor}},
\code{\link{mlr_graphs_distrcompositor}},
\code{\link{mlr_graphs_probregr}},
\code{\link{mlr_graphs_responsecompositor}},
\code{\link{mlr_graphs_survaverager}},
\code{\link{mlr_graphs_survbagging}},
\code{\link{mlr_graphs_survtoclassif_IPCW}},
\code{\link{mlr_graphs_survtoclassif_disctime}}
}
\concept{pipelines}
